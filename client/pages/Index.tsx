import { useEffect, useMemo, useState } from "react";
import { Megaphone, MapPin, Siren, Users, ShieldCheck, MessageSquare, PhoneCall } from "lucide-react";
import { DemoResponse } from "@shared/api";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import { getRole } from "@/lib/auth";

const translations: Record<string, { tagline: string; sub: string; actions: string[] }> = {
  en: {
    tagline: "Connecting Citizens, Transforming Governance",
    sub: "Report issues, track progress, and collaborate with your city.",
    actions: ["Submit Complaint", "Track Status", "Emergency Help", "Volunteer Signup"],
  },
  hi: {
    tagline: "рдирд╛рдЧрд░рд┐рдХреЛрдВ рдХреЛ рдЬреЛрдбрд╝рдирд╛, рд╢рд╛рд╕рди рдмрджрд▓рдирд╛",
    sub: "рд╕рдорд╕реНрдпрд╛рдПрдБ рджрд░реНрдЬ рдХрд░реЗрдВ, рдкреНрд░рдЧрддрд┐ рджреЗрдЦреЗрдВ рдФрд░ рд╢рд╣рд░ рдХреЗ рд╕рд╛рде рдорд┐рд▓рдХрд░ рдХрд╛рдо рдХрд░реЗрдВред",
    actions: ["рд╢рд┐рдХрд╛рдпрдд рджрд░реНрдЬ рдХрд░реЗрдВ", "рд╕реНрдерд┐рддрд┐ рдЯреНрд░реИрдХ рдХрд░реЗрдВ", "рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛", "рд╕реНрд╡рдпрдВрд╕реЗрд╡реА рдЬреБрдбрд╝реЗрдВ"],
  },
  ta: {
    tagline: "роХрпБроЯро┐роороХрпНроХро│рпИ роЗрогрпИродрпНродрпБ, роЖроЯрпНроЪро┐ропрпИ рооро╛ро▒рпНро▒рпБродро▓рпН",
    sub: "роЪро┐роХрпНроХро▓рпНроХро│рпИ родрпЖро░ро┐ро╡ро┐роХрпНроХро╡рпБроорпН, роорпБройрпНройрпЗро▒рпНро▒родрпНродрпИ роХрогрпНроХро╛рогро┐роХрпНроХро╡рпБроорпН, роироХро░родрпНродрпБроЯройрпН роЪрпЗро░рпНроирпНродрпБ роЪрпЖропро▓рпНрокроЯро╡рпБроорпН.",
    actions: ["рокрпБроХро╛ро░рпН роЪрооро░рпНрокрпНрокро┐роХрпНроХ", "роиро┐ро▓рпИ роХрогрпНроХро╛рогро┐роХрпНроХ", "роЕро╡роЪро░ роЙродро╡ро┐", "родройрпНройро╛ро░рпНро╡ рокродро┐ро╡рпБ"],
  },
  te: {
    tagline: "р░кр▒Мр░░р▒Бр░▓р░ир▒Б р░Хр░▓р▒Бр░кр▒Бр░др▒В, р░кр░╛р░▓р░ир░ир▒Б р░ор░╛р░░р▒Нр░Ър░бр░В",
    sub: "р░╕р░ор░╕р▒Нр░пр░▓р░ир▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐, р░кр▒Бр░░р▒Лр░Чр░др░┐р░ир░┐ р░Яр▒Нр░░р░╛р░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐ р░ор░░р░┐р░пр▒Б р░ир░Чр░░р░Вр░др▒Л р░Хр░▓р░┐р░╕р░┐ р░кр░ир░┐ р░Ър▒Зр░пр░Вр░бр░┐.",
    actions: ["р░лр░┐р░░р▒Нр░пр░╛р░жр▒Б р░╕р░ор░░р▒Нр░кр░┐р░Вр░Ър░Вр░бр░┐", "р░╕р▒Нр░ер░┐р░др░┐ р░Яр▒Нр░░р░╛р░Хр▒Н р░Ър▒Зр░пр░Вр░бр░┐", "р░Ер░др▒Нр░пр░╡р░╕р░░ р░╕р░╣р░╛р░пр░В", "р░╕р▒Нр░╡р░Ър▒Нр░Ыр░Вр░жр░Вр░Чр░╛ р░Ър▒Зр░░р░Вр░бр░┐"],
  },
  bn: {
    tagline: "ржирж╛ржЧрж░рж┐ржХржжрзЗрж░ рж╕ржВржпрзБржХрзНржд ржХрж░рж╛, рж╢рж╛рж╕ржи ржмрзНржпржмрж╕рзНржерж╛рж░ рж░рзВржкрж╛ржирзНрждрж░",
    sub: "рж╕ржорж╕рзНржпрж╛ ржЬрж╛ржирж╛ржи, ржЕржЧрзНрж░ржЧрждрж┐ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рзБржи ржПржмржВ рж╢рж╣рж░рзЗрж░ рж╕рж╛ржерзЗ рж╕рж╣ржпрзЛржЧрж┐рждрж╛ ржХрж░рзБржиред",
    actions: ["ржЕржнрж┐ржпрзЛржЧ ржЬржорж╛ ржжрж┐ржи", "рж╕рзНржЯрзНржпрж╛ржЯрж╛рж╕ ржЯрзНрж░рзНржпрж╛ржХ ржХрж░рзБржи", "ржЬрж░рзБрж░рж┐ рж╕рж╣рж╛ржпрж╝рждрж╛", "рж╕рзНржмрзЗржЪрзНржЫрж╛рж╕рзЗржмржХ ржирж┐ржмржирзНржзржи"],
  },
  mr: {
    tagline: "рдирд╛рдЧрд░рд┐рдХрд╛рдВрдирд╛ рдЬреЛрдбрдгреЗ, рд╢рд╛рд╕рди рдмрджрд▓рдгя┐╜я┐╜",
    sub: "рд╕рдорд╕реНрдпрд╛ рдиреЛрдВрджрд╡рд╛, рдкреНрд░рдЧрддреА рдЯреНрд░реЕрдХ рдХрд░рд╛ рдЖрдгрд┐ рдЖрдкрд▓реНрдпрд╛ рд╢рд╣рд░рд╛рд╕реЛрдмрдд рд╕рд╣рдХрд╛рд░реНрдп рдХрд░рд╛.",
    actions: ["рддрдХреНрд░рд╛рд░ рдиреЛрдВрджрд╡рд╛", "рд╕реНрдерд┐рддреА рдЯреНрд░реЕрдХ рдХрд░рд╛", "рдЖрдкрддреНрдХрд╛рд▓реАрди рдорджрдд", "рд╕реНрд╡рдпрдВрд╕реЗрд╡рдХ рдиреЛрдВрджрдгреА"],
  },
  kn: {
    tagline: "р▓ир▓╛р▓Чр▓░р▓┐р▓Хр▓░р▓ир│Нр▓ир│Б р▓╕р▓Вр▓кр▓░р│Нр▓Хр▓┐р▓╕р▓┐, р▓Жр▓бр▓│р▓┐р▓д р▓кр▓░р▓┐р▓╡р▓░р│Нр▓др▓ир│Ж",
    sub: "р▓╕р▓ор▓╕р│Нр▓пр│Жр▓Чр▓│р▓ир│Нр▓ир│Б р▓╡р▓░р▓жр▓┐ р▓ор▓╛р▓бр▓┐, р▓кр│Нр▓░р▓Чр▓др▓┐р▓пр▓ир│Нр▓ир│Б р▓Яр│Нр▓░р│Нр▓пр▓╛р▓Хр│Н р▓ор▓╛р▓бр▓┐ р▓ор▓др│Нр▓др│Б р▓ир▓┐р▓ор│Нр▓о р▓ир▓Чр▓░р│Кр▓Вр▓жр▓┐р▓Чр│Ж р▓╕р▓╣р▓Хр▓░р▓┐р▓╕р▓┐.",
    actions: ["р▓жр│Вр▓░р│Б р▓╕р▓▓р│Нр▓▓р▓┐р▓╕р▓┐", "р▓╕р│Нр▓ер▓┐р▓др▓┐ р▓Яр│Нр▓░р│Нр▓пр▓╛р▓Хр│Н", "р▓др│Бр▓░р│Нр▓др│Б р▓╕р▓╣р▓╛р▓п", "р▓╕р│Зр▓╡р▓Хр▓░ р▓ир│Лр▓Вр▓жр▓гр▓┐"],
  },
};

export default function Index() {
  const [exampleFromServer, setExampleFromServer] = useState("");
  const [lang, setLang] = useState<string>(() => localStorage.getItem("lang") || "en");
  const [role, setRole] = useState<"citizen" | "officer" | "admin">(() => getRole());

  useEffect(() => {
    const onChange = (e: any) => setLang(e.detail || localStorage.getItem("lang") || "en");
    window.addEventListener("lang-change", onChange as any);
    return () => window.removeEventListener("lang-change", onChange as any);
  }, []);

  useEffect(() => {
    fetchDemo();
  }, []);

  const t = useMemo(() => translations[lang] || translations.en, [lang]);

  const fetchDemo = async () => {
    try {
      const response = await fetch("/api/demo");
      const data = (await response.json()) as DemoResponse;
      setExampleFromServer(data.message);
    } catch (error) {
      // ignore
    }
  };

  const quickActions = [
    { label: t.actions[0], icon: Megaphone, to: "/complaints", color: "from-saffron/90 to-orange-400" },
    { label: t.actions[1], icon: ShieldCheck, to: "/complaints", color: "from-indigo-500 to-navy" },
    { label: t.actions[2], icon: Siren, to: "/emergency", color: "from-red-500 to-rose-600" },
    { label: t.actions[3], icon: Users, to: "/volunteers", color: "from-emerald-500 to-indiaGreen" },
  ];

  const liveComplaints = [
    { id: 1, text: "Pothole reported - Bengaluru", color: "text-emerald-700" },
    { id: 2, text: "Water leakage - Mumbai", color: "text-blue-700" },
    { id: 3, text: "Street light issue - Delhi", color: "text-yellow-700" },
    { id: 4, text: "Garbage collection delay - Kolkata", color: "text-orange-700" },
    { id: 5, text: "Tree fall - Chennai", color: "text-lime-700" },
  ];

  function handleEmergency(type: string) {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (pos) => {
          toast.success(`${type} alerted with GPS: ${pos.coords.latitude.toFixed(3)}, ${pos.coords.longitude.toFixed(3)}`);
        },
        () => toast.error("Location access denied")
      );
    } else {
      toast.message(`${type} alerted`);
    }
  }

  return (
    <div className="min-h-screen relative overflow-hidden">
      <IconCloud />

      {/* Hero */}
      <section className="relative">
        <div className="absolute inset-0 -z-10 opacity-20" style={{ backgroundImage: "var(--flag-gradient)" }} />
        <div className="container py-16 md:py-24">
          <h1 className="text-4xl md:text-6xl font-extrabold leading-tight max-w-3xl" style={{ color: "hsl(var(--navy))" }}>
            {t.tagline}
          </h1>
          <p className="mt-4 text-lg text-muted-foreground max-w-2xl">{t.sub}</p>
          <div className="mt-8 grid grid-cols-2 md:grid-cols-4 gap-4">
            {quickActions.map((a) => (
              <a key={a.label} href={a.to} className={`group relative overflow-hidden rounded-xl p-4 bg-gradient-to-br ${a.color} text-white shadow-lg hover:shadow-xl transition-shadow` }>
                <a.icon className="h-6 w-6 mb-2 drop-shadow" />
                <div className="font-semibold">{a.label}</div>
                <div className="absolute -right-6 -bottom-6 h-20 w-20 rounded-full bg-white/15 blur-xl group-hover:scale-110 transition-transform" />
              </a>
            ))}
          </div>
          <div className="mt-6 flex items-center gap-2 text-sm text-muted-foreground">
            <div className="h-2 w-2 rounded-full bg-emerald-500 animate-pulse" />
            Live systems operational тАв {exampleFromServer || "Secure API connected"}
          </div>
        </div>
      </section>

      {/* Map preview in its own section */}
      <section className="container pb-4">
        <div className="rounded-3xl overflow-hidden border bg-card shadow-xl">
          <div className="flex items-center justify-between px-4 py-3 border-b bg-muted/40">
            <div className="flex items-center gap-2 text-sm">
              <MapPin className="h-4 w-4 text-primary" />
              Live Complaints Map
            </div>
            <a className="text-xs text-primary underline" href="/map">Open full map</a>
          </div>
          <div className="grid md:grid-cols-3">
            <div className="md:col-span-2 aspect-[16/9] md:aspect-auto">
              <iframe title="OSM India" className="h-full w-full" src="https://www.openstreetmap.org/export/embed.html?bbox=67.5,6.5,97.5,37.5&layer=mapnik" />
            </div>
            <div className="border-t md:border-t-0 md:border-l p-4 space-y-3">
              <div className="text-sm font-semibold">Live Feed</div>
              <div className="overflow-hidden">
                <div className="whitespace-nowrap animate-marquee flex gap-8">
                  {liveComplaints.concat(liveComplaints).map((c, i) => (
                    <span key={c.id + "-" + i} className={`text-xs md:text-sm ${c.color}`}>тАв {c.text}</span>
                  ))}
                </div>
              </div>
              <div className="text-xs text-muted-foreground">Filters: Category тАв Region тАв Language</div>
            </div>
          </div>
        </div>
      </section>

      {/* Engagement shortcuts */}
      <section className="container py-12 grid sm:grid-cols-3 gap-6">
        <EngageCard icon={MessageSquare} title="Chatbot & IVR" desc="Ask questions or submit complaints with guided steps." color="from-navy to-indigo-600" />
        <EngageCard icon={ShieldCheck} title="Real-time Tracking" desc="Stay updated with status changes and SLA timers." color="from-emerald-600 to-indiaGreen" />
        <EngageCard icon={Users} title="Volunteer & Help Desk" desc="Join city drives and schedule mobile help desk." color="from-orange-400 to-saffron" />
      </section>

      {/* Emergency floating action */}
      <div className="fixed bottom-6 right-6 z-40">
        <div className="flex flex-col gap-2">
          <Button className="shadow-lg" onClick={() => handleEmergency("Police")}>ЁЯЪФ Police</Button>
          <Button variant="destructive" className="shadow-lg" onClick={() => handleEmergency("Fire")}>ЁЯФе Fire</Button>
          <Button variant="secondary" className="shadow-lg" onClick={() => handleEmergency("Ambulance")}>ЁЯй║ Ambulance</Button>
          <Button variant="outline" className="mt-1 gap-2"> <PhoneCall className="h-4 w-4"/> SOS</Button>
        </div>
      </div>
    </div>
  );
}

function EngageCard({ icon: Icon, title, desc, color }: { icon: any; title: string; desc: string; color: string }) {
  return (
    <div className={`relative overflow-hidden rounded-2xl border bg-gradient-to-br ${color} text-white p-6 shadow-lg`}>
      <Icon className="h-6 w-6" />
      <h3 className="mt-2 text-lg font-semibold">{title}</h3>
      <p className="mt-1 text-sm/6 opacity-90">{desc}</p>
      <div className="absolute -right-10 -bottom-10 h-32 w-32 rounded-full bg-white/10 blur-2xl" />
    </div>
  );
}

function IconCloud() {
  return (
    <div className="pointer-events-none absolute inset-0 -z-10 overflow-hidden">
      <Megaphone className="absolute left-10 top-24 h-8 w-8 text-saffron/70 animate-float" />
      <ShieldCheck className="absolute right-16 top-20 h-8 w-8 text-navy/70 animate-float-slow" />
      <MapPin className="absolute left-1/2 top-40 h-8 w-8 text-emerald-600/70 animate-float-fast" />
      <Users className="absolute right-12 bottom-24 h-8 w-8 text-saffron/70 animate-float" />
      <Siren className="absolute left-20 bottom-20 h-8 w-8 text-rose-600/70 animate-float-slow" />
    </div>
  );
}
